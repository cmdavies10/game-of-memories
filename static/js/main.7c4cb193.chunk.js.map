{"version":3,"sources":["component/Navbar.js","component/Main.js","component/Score.js","component/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","styles","width","height","padding","Main","style","onClick","handleClick","id","src","image","alt","Score","Jumbotron","correctGuesses","topScore","FooterComponent","Container","alertMessage","shuffle","array","sort","Math","random","App","state","images","clickedImage","filter","clicked","i","length","setState","imgArray","this","map","key","background","class","Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c4cb193.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Style.css\";\r\n// import Container from \"react-bootstrap/Container\";\r\n\r\nfunction Navbar(props) {\r\n\treturn (\r\n\t\t<div className=\"wrapper\">\r\n\t\t\t{/* <Container> */}\r\n\t\t\t<nav className=\"navbar\">\r\n\t\t\t\t<h2>GoM | GAME OF MEMORIES</h2>\r\n\t\t\t</nav>\r\n\t\t\t{/* </Container> */}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n\twidth: 200,\r\n\theight: 200,\r\n\tpadding: 10\r\n};\r\n\r\nfunction Main(props) {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"col-3\"\r\n\t\t\tstyle={styles}\r\n\t\t\tonClick={() => props.handleClick(props.id)}\r\n\t\t>\r\n\t\t\t<div className=\"img-container\">\r\n\t\t\t\t<img src={props.image} alt=\"\" style={styles} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport \"../styles/Style.css\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nconst styles = {\r\n\theight: 50\r\n};\r\n\r\nfunction Score(props) {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<Jumbotron className=\"text-center text-dark-50\" styles={styles}>\r\n\t\t\t\t<h5>\r\n\t\t\t\t\tTest your memory skills by not choosing the same character\r\n\t\t\t\t\ttwice.\r\n\t\t\t\t</h5>\r\n\t\t\t\t<hr />\r\n\t\t\t\t<div className=\"text-dark-50\">\r\n\t\t\t\t\t<h4>\r\n\t\t\t\t\t\tRound Score: {props.correctGuesses} | High Score:{\" \"}\r\n\t\t\t\t\t\t{props.topScore}\r\n\t\t\t\t\t</h4>\r\n\t\t\t\t</div>\r\n\t\t\t</Jumbotron>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\nimport \"../styles/Style.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\n// import Footer from \"react-bootstrap/Footer\";\r\n\r\nfunction FooterComponent(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Container>\r\n\t\t\t\t<br />\r\n\t\t\t\t<hr />\r\n\t\t\t\t<div className=\"footer text-center text-dark-50\">\r\n\t\t\t\t\tc.m. davies\r\n\t\t\t\t</div>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default FooterComponent;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./component/Navbar\";\r\nimport images from \"./images.json\";\r\nimport Main from \"./component/Main\";\r\nimport Score from \"./component/Score\";\r\nimport FooterComponent from \"./component/Footer\";\r\n\r\nlet correctGuesses = 0;\r\nlet topScore = 0;\r\nlet alertMessage = \"\";\r\n\r\nfunction shuffle(array) {\r\n\tarray.sort(() => Math.random() - 0.5);\r\n}\r\n\r\nclass App extends React.Component {\r\n\tstate = {\r\n\t\timages,\r\n\t\talertMessage,\r\n\t\ttopScore,\r\n\t\tcorrectGuesses\r\n\t};\r\n\r\n\thandleClick = id => {\r\n\t\tconst images = this.state.images;\r\n\r\n\t\tconst clickedImage = images.filter(image => image.id === id);\r\n\r\n\t\tif (clickedImage[0].clicked) {\r\n\t\t\tcorrectGuesses = 0;\r\n\t\t\talertMessage = \"Incorrect Guess\";\r\n\r\n\t\t\tfor (let i = 0; i < images.length; i++) {\r\n\t\t\t\timages[i].clicked = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.setState({ alertMessage });\r\n\t\t\tthis.setState({ correctGuesses });\r\n\t\t\tthis.setState({ images });\r\n\t\t} else if (correctGuesses < 11) {\r\n\t\t\tclickedImage[0].clicked = true;\r\n\r\n\t\t\tcorrectGuesses++;\r\n\r\n\t\t\talertMessage = \"Correct Guess\";\r\n\r\n\t\t\tif (correctGuesses > topScore) {\r\n\t\t\t\ttopScore = correctGuesses;\r\n\t\t\t\tthis.setState({ topScore });\r\n\t\t\t}\r\n\r\n\t\t\tshuffle(images);\r\n\r\n\t\t\tthis.setState({ images });\r\n\t\t\tthis.setState({ correctGuesses });\r\n\t\t\tthis.setState({ alertMessage });\r\n\t\t} else {\r\n\t\t\tclickedImage[0].clicked = true;\r\n\r\n\t\t\tcorrectGuesses = 0;\r\n\t\t\talertMessage = \"WINNER!\";\r\n\t\t\ttopScore = 12;\r\n\t\t\tthis.setState({ topScore });\r\n\r\n\t\t\tfor (let i = 0; i < images.length; i++) {\r\n\t\t\t\timages[i].clicked = false;\r\n\t\t\t}\r\n\r\n\t\t\tshuffle(images);\r\n\r\n\t\t\tthis.setState({ images });\r\n\t\t\tthis.setState({ correctGuesses });\r\n\t\t\tthis.setState({ alertMessage });\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst imgArray = this.state.images.map(image => (\r\n\t\t\t<Main\r\n\t\t\t\tid={image.id}\r\n\t\t\t\timage={image.image}\r\n\t\t\t\tkey={image.id}\r\n\t\t\t\thandleClick={this.handleClick}\r\n\t\t\t/>\r\n\t\t));\r\n\t\treturn (\r\n\t\t\t<div className=\"wrapper\" style={{ background: \"#e6f5ff\" }}>\r\n\t\t\t\t<Navbar />\r\n\t\t\t\t<Score\r\n\t\t\t\t\talertMessage={this.state.alertMessage}\r\n\t\t\t\t\ttopScore={this.state.topScore}\r\n\t\t\t\t\tcorrectGuesses={this.state.correctGuesses}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div class=\"row\">{imgArray}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<FooterComponent />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}